== 0.0.11

* The file "bigbluebutton-api" was renamed to "bigbluebutton_api". All "require" calls must be updated.
* Splitted the library in more files (more modular) and created rspec tests for it.
* Added a BigBlueButtonApi.timeout attribute to timeout get requests and avoid blocks when the server is down. Defaults to 2 secs.
* New method last_http_response to access the last HTTP response object.
* Automatically detects the BBB server version if not informed by the user.

== 0.0.10

* Returning hash now will *always* have these 3 values: :returncode (boolean), :messageKey (string) and :message (string).
* Some values in the hash are now converted to a fixed variable type to avoid inconsistencies:
  * :meetingID (string)
  * :attendeePW (string)
  * :moderatorPW (string)
  * :running (boolean)
  * :hasBeenForciblyEnded (boolean)
  * :endTime and :startTime (DateTime or nil)

== 0.0.9

* Simplied "attendees" part of the hash returned in get_meeting_info. Same thing done for get_meetings.

== 0.0.8

* New method get_api_version that returns the version of the server API (>= 0.7).
* New simplified hash syntax for get_meetings. See docs for details.

== 0.0.6

* New method test_connection.
* Added comparison method for APIs.
* Methods attendee_url and moderator_url deprecated. Use join_meeting_url.
* Better exception throwing when the user is unreachable or the response is incorrect.
  * BigBlueButtonException has now a "key" attribute to store the "messageKey" returned by BBB in failures.

== 0.0.4

* Added support for BigBlueButton 0.7.
* Gem renamed from 'bigbluebutton' to 'bigbluebutton-api-ruby'.
* API functions now return a hash and instead of the XML returned by BBB. The XML is converted to a hash that uses symbols as keys and groups keys with the same name.

== 0.0.3

* Fixes module issue preventing proper throwing of exceptions.

== 0.0.1

* This is the first version of this gem. It provides an implementation of the 0.64 bbb API, with the following exceptions:
  * Does not implement meeting token, and instead relies on meeting id as the unique identifier for a meeting.
  * Documentation suggests there is way to call join_meeting as API call (instead of browser URL). This call currently does not work as documented.
